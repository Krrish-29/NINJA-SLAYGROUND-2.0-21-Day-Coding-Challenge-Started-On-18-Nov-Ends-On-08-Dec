//Number of Inversions
#include <vector> 
#include <iostream> 
using namespace std;
int mergeAndCount(vector<int>& arr, int left, int mid, int right) { 
    int i = left, j = mid, k = 0; 
    int inv_count = 0; 
    vector<int> temp(right - left + 1); 
    while (i < mid && j <= right) { 
        if (arr[i] <= arr[j]) { 
            temp[k++] = arr[i++]; 
        } 
        else { 
            temp[k++] = arr[j++]; 
            inv_count += (mid - i);
            } 
        } 
    while (i < mid) { 
        temp[k++] = arr[i++]; 
    } 
    while (j <= right) { 
        temp[k++] = arr[j++]; 
    } 
    for (i = left, k = 0; i <= right; i++, k++) { 
        arr[i] = temp[k]; 
    } 
    return inv_count;
}
int mergeSortAndCount(vector<int>& arr, int left, int right) { 
    int inv_count = 0; 
    if (left < right) { 
        int mid = left + (right - left) / 2; 
        inv_count += mergeSortAndCount(arr, left, mid); 
        inv_count += mergeSortAndCount(arr, mid + 1, right); 
        inv_count += mergeAndCount(arr, left, mid + 1, right); 
    } 
    return inv_count; 
}
int numberOfInversions(vector<int>& arr,int n) { 
    return mergeSortAndCount(arr,0,n-1);
}
